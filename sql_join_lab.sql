#Write SQL queries to perform the following tasks using the Sakila database:
USE sakila;
#List the number of films per category.

SELECT COUNT(*) AS number_films, c.name
From film AS f
INNER JOIN film_category AS fc
USING(film_id)
INNER JOIN cattop50contryegory AS c
USING(category_id)
GROUP BY c.name;
#Retrieve the store ID, city, and country for each store.
SELECT s.store_id,ci.city,co.country
FROM store AS s
INNER JOIN address AS ad
USING(address_id)
INNER JOIN city AS ci
USING(city_id)
INNER JOIN country as co
USING(country_id);
#Calculate the total revenue generated by each store in dollars.
SELECT s.store_id, SUM(p.amount) AS total_revenue
FROM store AS s
INNER JOIN staff as st
USING(store_id)
INNER JOIN payment as p
USING (staff_id)
GROUP BY s.store_id;
#Determine the average running time of films for each category.
SELECT c.name, AVG(f.length) AS avg_running_time
FROM film AS f
INNER JOIN film_category AS fc
USING (film_id)
INNER JOIN category as c
USING (category_id)
GROUP BY c.name;

#Bonus:

#Identify the film categories with the longest average running time.
SELECT c.name, AVG(f.length) AS avg_running_time
FROM film AS f
INNER JOIN film_category AS fc
USING (film_id)
INNER JOIN category as c
USING (category_id)
GROUP BY c.name
ORDER BY avg_running_time DESC
LIMIT 1;

#Display the top 10 most frequently rented movies in descending order.
SELECT f.title, COUNT(*) AS number_rentals
FROM rental AS r
INNER JOIN inventory AS i
USING(inventory_id)
INNER JOIN film AS f
USING(film_id)
GROUP BY f.title
ORDER BY number_rentals DESC
LIMIT 10;

#Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT 
    CASE 
        WHEN COUNT(*) > 0 THEN 'Yes'
        ELSE 'No'
    END AS can_be_rented
FROM inventory AS i
JOIN film  AS f 
USING(film_id)
JOIN store AS s
USING(store_id)
WHERE f.title = 'Academy Dinosaur' AND s.store_id = 1;

#Provide a list of all distinct film titles, along with their availability status in the inventory. 
#Include a column indicating whether each title is 'Available' or 'NOT available.' 
#Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."
SELECT 
    f.title,
    CASE 
        WHEN COUNT(i.inventory_id) > 0 THEN 'Available'
        ELSE 'NOT available'
    END AS availability_status
FROM film  AS f
LEFT JOIN inventory AS i
USING(film_id)
GROUP BY f.title;
